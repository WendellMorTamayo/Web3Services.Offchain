// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Web3Services.Data.Models;

#nullable disable

namespace Web3Services.Data.Migrations
{
    [DbContext(typeof(Web3ServicesDbContext))]
    [Migration("20250918124807_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Argus.Sync.Data.Models.ReducerState", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LatestIntersectionsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartIntersectionJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("ReducerStates", "public");
                });

            modelBuilder.Entity("Web3Services.Data.Models.Entity.BlockTest", b =>
                {
                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("Slot")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Hash");

                    b.ToTable("BlockTests", "public");
                });

            modelBuilder.Entity("Web3Services.Data.Models.Entity.OutputBySlot", b =>
                {
                    b.Property<string>("OutRef")
                        .HasColumnType("text");

                    b.Property<string>("PaymentKeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Raw")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<decimal>("Slot")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("SpentSlot")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("SpentTxHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StakeKeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OutRef");

                    b.HasIndex("PaymentKeyHash");

                    b.HasIndex("Slot");

                    b.HasIndex("SpentSlot");

                    b.HasIndex("SpentTxHash");

                    b.HasIndex("StakeKeyHash");

                    b.HasIndex("PaymentKeyHash", "Slot");

                    b.HasIndex("PaymentKeyHash", "StakeKeyHash");

                    b.HasIndex("StakeKeyHash", "Slot");

                    b.ToTable("OutputsBySlot", "public");
                });

            modelBuilder.Entity("Web3Services.Data.Models.Entity.TrackedAddress", b =>
                {
                    b.Property<string>("PaymentKeyHash")
                        .HasColumnType("text");

                    b.Property<string>("StakeKeyHash")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PaymentKeyHash", "StakeKeyHash");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PaymentKeyHash");

                    b.HasIndex("StakeKeyHash");

                    b.ToTable("TrackedAddresses", "public");
                });

            modelBuilder.Entity("Web3Services.Data.Models.Entity.TransactionByAddress", b =>
                {
                    b.Property<string>("PaymentKeyHash")
                        .HasColumnType("text");

                    b.Property<string>("StakeKeyHash")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<byte[]>("Raw")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<decimal>("Slot")
                        .HasColumnType("numeric(20,0)");

                    b.PrimitiveCollection<string[]>("Subjects")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("PaymentKeyHash", "StakeKeyHash", "Hash");

                    b.HasIndex("Hash");

                    b.HasIndex("PaymentKeyHash");

                    b.HasIndex("Slot");

                    b.HasIndex("Subjects");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Subjects"), "gin");

                    b.HasIndex("PaymentKeyHash", "StakeKeyHash");

                    b.HasIndex("PaymentKeyHash", "Slot", "Hash")
                        .IsDescending(false, true, true);

                    b.HasIndex("PaymentKeyHash", "StakeKeyHash", "Slot", "Hash")
                        .IsDescending(false, false, true, true);

                    b.ToTable("TransactionsByAddress", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
